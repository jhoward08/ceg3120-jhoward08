AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Howard CF Template to create a VPC, allow SSH access from trusted networks, and create a single instance with an Elastic IP address similar to Project_03.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    ## Removed SSHLocation due to not using at this time.
  #SSHLocation:
  #  Description: ' The IP address range that can be used to access the EC2 instance'
  #  Type: String
  #  MinLength: '9'
  #  MaxLength: '18'
  #  Default: 0.0.0.0/0 # This leaves it open to the whole world. Fix using private subnet.
  #  AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  #  ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:  # Supported architectures (x64bit only)
    t2.micro:
      Arch: HVM64
  AWSRegionUbuntu: # AMI for a Linux VM in the supported region 
    us-east-1:   # N. Virginia
      PV64: NOT_SUPPORTED
      HVM64: ami-02e136e904f3da870
      HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.8.8.0/24 # this should be a CIDR 24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3120 VPC
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.8.8.0/28 # this should be a CIDR of 28
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  UbuntuIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref PublicUbuntuInstance
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and open all internal ports.
      SecurityGroupIngress:
        #- IpProtocol: tcp # Get rid of this part where the var is used. leave the defined block above alone or remove for better readability.
          #FromPort: '22'
          #ToPort: '22'
          #CidrIp: !Ref SSHLocation # Where logged into from terminal window?
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 130.108.0.0/16  # WSU CIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 108.213.147.166/32  # Personal CIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.8.8.0/24 # Internal Subnet CIDR!
        #- IpProtocol: tcp
        #  FromPort: '1'
        #  ToPort: '65535'
        #  CidrIp: 0.0.0.0/0 # External ALL! We get rid of this to ensure proper lockdown of internal activities.
  PublicUbuntuInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CF instance
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.8.8.7 # Needs to be private subnet, not subnet mask.
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install -y \
              python3-pip git python3 && \
            reboot
